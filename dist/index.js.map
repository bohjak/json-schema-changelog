{
  "version": 3,
  "sources": ["../lib/index.ts", "../lib/types.ts", "../lib/utils.ts", "../lib/sets.ts", "../lib/diff.ts"],
  "sourcesContent": ["export { getDiff } from \"./internal\";\n", "export enum DiffType {\n  ADDITION = \"ADDITION\",\n  REMOVAL = \"REMOVAL\",\n  CHANGE = \"CHANGE\",\n}\n\nexport type PropPath = string;\n\nexport interface DiffValue {\n  before?: Obj;\n  after?: Obj;\n}\n\nexport interface DiffObject {\n  // Type of difference\n  type: DiffType;\n  // Path to changed property\n  propPath: PropPath;\n  // Name of the changed property\n  propName: string;\n  // What changed\n  value: DiffValue;\n}\n\nexport type DiffMap = Map<PropPath, DiffObject>;\n\nexport interface Diff {\n  additions?: DiffMap;\n  removals?: DiffMap;\n  changes?: DiffMap;\n}\n\nexport type Obj = Record<string, unknown>;\n\nexport type MetaDiff = [diff: Obj, paths: Set<string>];\n", "import type { Obj } from \"./internal\";\n\nexport const has = (obj: Obj, key: string) =>\n  Object.prototype.hasOwnProperty.call(obj, key);\n\nexport const hasValues = (obj: Obj) => Boolean(Object.keys(obj).length);\n\nexport const isObj = (obj: unknown): obj is Obj =>\n  Boolean(obj && typeof obj === \"object\");\n\nexport const deepDot = (obj: Obj, path: string[]) =>\n  path.reduce((o, key) => o?.[key] as Obj, obj);\n\nexport const last = <T>(arr: T[]): T => arr[arr.length - 1];\n", "import { has, hasValues, isObj, MetaDiff, Obj } from \"./internal\";\n\nexport function subtractObj(a: Obj, b: Obj, partialPath = \"\"): MetaDiff {\n  const diff: Obj = {};\n  const paths: string[] = [];\n\n  for (const key in a) {\n    const path = partialPath + key;\n    const pA = a[key];\n    const pB = b[key];\n\n    if (!has(b, key)) {\n      // B is missing prop from A\n      diff[key] = a[key];\n      paths.push(path);\n    } else if (isObj(pA) && isObj(pB)) {\n      // Reccursion\n      const [nestDiff, nestPaths] = subtractObj(pA, pB, path + \".\");\n\n      if (hasValues(nestDiff)) {\n        diff[key] = nestDiff;\n      }\n\n      if (nestPaths.size) {\n        paths.push(...nestPaths);\n      }\n    } else if (pA !== pB) {\n      // Value has changed\n      diff[key] = pA;\n      paths.push(path);\n    }\n  }\n\n  return [diff, new Set(paths)];\n}\n\nexport function intersectSet<T>(a: Set<T>, b: Set<T>): Set<T> {\n  return new Set([...a].filter((v) => b.has(v)));\n}\n\nexport function addSet<T>(a: Set<T>, b: Set<T>): Set<T> {\n  return new Set([...a, ...b]);\n}\n\nexport function subtractSet<T>(a: Set<T>, b: Set<T>): Set<T> {\n  return new Set([...a].filter((v) => !b.has(v)));\n}\n\nexport function symSubstrSet<T>(a: Set<T>, b: Set<T>): Set<T> {\n  const intersection = intersectSet(a, b);\n  const union = addSet(a, b);\n\n  return subtractSet(union, intersection);\n}\n", "import {\n  deepDot,\n  Diff,\n  DiffMap,\n  DiffType,\n  intersectSet,\n  last,\n  MetaDiff,\n  Obj,\n  subtractObj,\n  subtractSet,\n} from \"./internal\";\n\nexport function createDiffMap(\n  addObj: Obj,\n  remObj: Obj,\n  type: DiffType,\n  paths: Set<string>,\n): DiffMap {\n  const diffMap: DiffMap = new Map();\n\n  for (const propPath of paths) {\n    const pathArr = propPath.split(\".\");\n\n    const before = deepDot(remObj, pathArr);\n    const after = deepDot(addObj, pathArr);\n\n    // TODO: make clever\n    const propName = pathArr[1] ?? last(pathArr);\n\n    diffMap.set(propPath, {\n      type,\n      propPath,\n      propName,\n      value: {\n        before,\n        after,\n      },\n    });\n  }\n\n  return diffMap;\n}\n\nexport function createDiffMaps(\n  addDiff: MetaDiff,\n  remDiff: MetaDiff,\n): Diff {\n  const [addObj, addPaths] = addDiff;\n  const [remObj, remPaths] = remDiff;\n\n  const changePaths = intersectSet(addPaths, remPaths);\n  const pureAddPaths = subtractSet(addPaths, changePaths);\n  const pureRemPaths = subtractSet(remPaths, changePaths);\n\n  const additions = createDiffMap(\n    addObj,\n    remObj,\n    DiffType.ADDITION,\n    pureAddPaths,\n  );\n  const removals = createDiffMap(\n    addObj,\n    remObj,\n    DiffType.REMOVAL,\n    pureRemPaths,\n  );\n  const changes = createDiffMap(addObj, remObj, DiffType.CHANGE, changePaths);\n\n  return {\n    additions,\n    removals,\n    changes,\n  };\n}\n\nexport function getDiff(a: Obj, b: Obj): Diff {\n  const additions = subtractObj(a, b);\n  const removals = subtractObj(b, a);\n\n  return createDiffMaps(additions, removals);\n}\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACAO,IAAK;AAAL,UAAK,WAAL;AACL,0BAAW;AACX,yBAAU;AACV,wBAAS;AAAA,GAHC;;;ACEL,IAAM,MAAM,CAAC,KAAU,QAC5B,OAAO,UAAU,eAAe,KAAK,KAAK;AAErC,IAAM,YAAY,CAAC,QAAa,QAAQ,OAAO,KAAK,KAAK;AAEzD,IAAM,QAAQ,CAAC,QACpB,QAAQ,OAAO,OAAO,QAAQ;AAEzB,IAAM,UAAU,CAAC,KAAU,SAChC,KAAK,OAAO,CAAC,GAAG,QAAQ,uBAAI,MAAa;AAEpC,IAAM,OAAO,CAAI,QAAgB,IAAI,IAAI,SAAS;;;ACXlD,qBAAqB,GAAQ,GAAQ,cAAc,IAAc;AACtE,QAAM,OAAY;AAClB,QAAM,QAAkB;AAExB,aAAW,OAAO,GAAG;AACnB,UAAM,OAAO,cAAc;AAC3B,UAAM,KAAK,EAAE;AACb,UAAM,KAAK,EAAE;AAEb,QAAI,CAAC,IAAI,GAAG,MAAM;AAEhB,WAAK,OAAO,EAAE;AACd,YAAM,KAAK;AAAA,eACF,MAAM,OAAO,MAAM,KAAK;AAEjC,YAAM,CAAC,UAAU,aAAa,YAAY,IAAI,IAAI,OAAO;AAEzD,UAAI,UAAU,WAAW;AACvB,aAAK,OAAO;AAAA;AAGd,UAAI,UAAU,MAAM;AAClB,cAAM,KAAK,GAAG;AAAA;AAAA,eAEP,OAAO,IAAI;AAEpB,WAAK,OAAO;AACZ,YAAM,KAAK;AAAA;AAAA;AAIf,SAAO,CAAC,MAAM,IAAI,IAAI;AAAA;AAGjB,sBAAyB,GAAW,GAAmB;AAC5D,SAAO,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,IAAI;AAAA;AAOrC,qBAAwB,GAAW,GAAmB;AAC3D,SAAO,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,IAAI;AAAA;;;AChCtC,uBACL,QACA,QACA,MACA,OACS;AAlBX;AAmBE,QAAM,UAAmB,IAAI;AAE7B,aAAW,YAAY,OAAO;AAC5B,UAAM,UAAU,SAAS,MAAM;AAE/B,UAAM,SAAS,QAAQ,QAAQ;AAC/B,UAAM,QAAQ,QAAQ,QAAQ;AAG9B,UAAM,WAAW,cAAQ,OAAR,YAAc,KAAK;AAEpC,YAAQ,IAAI,UAAU;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA,OAAO;AAAA,QACL;AAAA,QACA;AAAA;AAAA;AAAA;AAKN,SAAO;AAAA;AAGF,wBACL,SACA,SACM;AACN,QAAM,CAAC,QAAQ,YAAY;AAC3B,QAAM,CAAC,QAAQ,YAAY;AAE3B,QAAM,cAAc,aAAa,UAAU;AAC3C,QAAM,eAAe,YAAY,UAAU;AAC3C,QAAM,eAAe,YAAY,UAAU;AAE3C,QAAM,YAAY,cAChB,QACA,QACA,SAAS,UACT;AAEF,QAAM,WAAW,cACf,QACA,QACA,SAAS,SACT;AAEF,QAAM,UAAU,cAAc,QAAQ,QAAQ,SAAS,QAAQ;AAE/D,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AAIG,iBAAiB,GAAQ,GAAc;AAC5C,QAAM,YAAY,YAAY,GAAG;AACjC,QAAM,WAAW,YAAY,GAAG;AAEhC,SAAO,eAAe,WAAW;AAAA;",
  "names": []
}
