{
  "version": 3,
  "sources": ["../lib/index.ts", "../lib/types.ts", "../lib/utils.ts", "../lib/sets.ts", "../lib/diff.ts"],
  "sourcesContent": ["export { getDiff } from \"./internal\";\n", "export enum DiffType {\n  ADDITION = \"ADDITION\",\n  REMOVAL = \"REMOVAL\",\n  CHANGE = \"CHANGE\",\n}\n\nexport type PropPath = string;\n\nexport interface DiffValue {\n  before?: Obj;\n  after?: Obj;\n}\n\nexport interface DiffObject {\n  // Type of difference\n  type: DiffType;\n  // Path to changed property\n  propPath: PropPath;\n  // Name of the changed property\n  propName: string;\n  // What changed\n  value: DiffValue;\n}\n\nexport type DiffMap = Map<PropPath, DiffObject>;\n\nexport interface Diff {\n  additions?: DiffMap;\n  removals?: DiffMap;\n  changes?: DiffMap;\n}\n\nexport type Obj = Record<string, unknown>;\n\nexport type MetaDiff = [diff: Obj, paths: Set<string>];\n", "import type { Obj } from \"./internal\";\n\nexport const has = (obj: Obj, key: string) =>\n  Object.prototype.hasOwnProperty.call(obj, key);\n\nexport const hasValues = (obj: Obj) => Boolean(Object.keys(obj).length);\n\nexport const isObj = (obj: unknown): obj is Obj =>\n  Boolean(obj && typeof obj === \"object\");\n\nexport const deepDot = (obj: Obj, path: string[]) =>\n  path.reduce((o, key) => o?.[key] as Obj, obj);\n\nexport const last = <T>(arr: T[]): T => arr[arr.length - 1];\n", "import { has, hasValues, isObj, MetaDiff, Obj } from \"./internal\";\n\nexport function subtractObj(a: Obj, b: Obj, partialPath = \"\"): MetaDiff {\n  const diff: Obj = {};\n  const paths: string[] = [];\n\n  for (const key in a) {\n    const path = partialPath + key;\n    const pA = a[key];\n    const pB = b[key];\n\n    if (!has(b, key)) {\n      // B is missing prop from A\n      diff[key] = a[key];\n      paths.push(path);\n    } else if (isObj(pA) && isObj(pB)) {\n      // Recursion\n      const [nestDiff, nestPaths] = subtractObj(pA, pB, path + \".\");\n\n      if (hasValues(nestDiff)) {\n        diff[key] = nestDiff;\n      }\n\n      if (nestPaths.size) {\n        paths.push(...nestPaths);\n      }\n    } else if (pA !== pB) {\n      // Value has changed\n      diff[key] = pA;\n      paths.push(path);\n    }\n  }\n\n  return [diff, new Set(paths)];\n}\n\nexport function intersectSet<T>(a: Set<T>, b: Set<T>): Set<T> {\n  return new Set([...a].filter((v) => b.has(v)));\n}\n\nexport function addSet<T>(a: Set<T>, b: Set<T>): Set<T> {\n  return new Set([...a, ...b]);\n}\n\nexport function subtractSet<T>(a: Set<T>, b: Set<T>): Set<T> {\n  return new Set([...a].filter((v) => !b.has(v)));\n}\n", "import {\n  deepDot,\n  Diff,\n  DiffMap,\n  DiffType,\n  intersectSet,\n  last,\n  MetaDiff,\n  Obj,\n  subtractObj,\n  subtractSet,\n} from \"./internal\";\n\nexport function createDiffMap(\n  addObj: Obj,\n  remObj: Obj,\n  type: DiffType,\n  paths: Set<string>,\n): DiffMap {\n  const diffMap: DiffMap = new Map();\n\n  for (const propPath of paths) {\n    const pathArr = propPath.split(\".\");\n\n    const before = deepDot(remObj, pathArr);\n    const after = deepDot(addObj, pathArr);\n\n    // TODO: make clever\n    const propName = pathArr[1] ?? last(pathArr);\n\n    diffMap.set(propPath, {\n      type,\n      propPath,\n      propName,\n      value: {\n        before,\n        after,\n      },\n    });\n  }\n\n  return diffMap;\n}\n\nexport function createDiffMaps(\n  addDiff: MetaDiff,\n  remDiff: MetaDiff,\n): Diff {\n  const [addObj, addPaths] = addDiff;\n  const [remObj, remPaths] = remDiff;\n\n  const changePaths = intersectSet(addPaths, remPaths);\n  const pureAddPaths = subtractSet(addPaths, changePaths);\n  const pureRemPaths = subtractSet(remPaths, changePaths);\n\n  const additions = createDiffMap(\n    addObj,\n    remObj,\n    DiffType.ADDITION,\n    pureAddPaths,\n  );\n  const removals = createDiffMap(\n    addObj,\n    remObj,\n    DiffType.REMOVAL,\n    pureRemPaths,\n  );\n  const changes = createDiffMap(addObj, remObj, DiffType.CHANGE, changePaths);\n\n  return {\n    additions,\n    removals,\n    changes,\n  };\n}\n\nexport function getDiff(a: Obj, b: Obj): Diff {\n  const additions = subtractObj(a, b);\n  const removals = subtractObj(b, a);\n\n  return createDiffMaps(additions, removals);\n}\n"],
  "mappings": "gIAAA,sCCAO,GAAK,GAAL,UAAK,EAAL,CACL,WAAW,WACX,UAAU,UACV,SAAS,WAHC,WCEL,GAAM,GAAM,CAAC,EAAU,IAC5B,OAAO,UAAU,eAAe,KAAK,EAAK,GAE/B,EAAY,AAAC,GAAa,QAAQ,OAAO,KAAK,GAAK,QAEnD,EAAQ,AAAC,GACpB,QAAQ,GAAO,MAAO,IAAQ,UAEnB,EAAU,CAAC,EAAU,IAChC,EAAK,OAAO,CAAC,EAAG,IAAQ,iBAAI,GAAa,GAE9B,EAAO,AAAI,GAAgB,EAAI,EAAI,OAAS,GCXlD,WAAqB,EAAQ,EAAQ,EAAc,GAAc,CACtE,GAAM,GAAY,GACZ,EAAkB,GAExB,OAAW,KAAO,GAAG,CACnB,GAAM,GAAO,EAAc,EACrB,EAAK,EAAE,GACP,EAAK,EAAE,GAEb,GAAI,CAAC,EAAI,EAAG,GAEV,EAAK,GAAO,EAAE,GACd,EAAM,KAAK,WACF,EAAM,IAAO,EAAM,GAAK,CAEjC,GAAM,CAAC,EAAU,GAAa,EAAY,EAAI,EAAI,EAAO,KAEzD,AAAI,EAAU,IACZ,GAAK,GAAO,GAGV,EAAU,MACZ,EAAM,KAAK,GAAG,OAEX,AAAI,KAAO,GAEhB,GAAK,GAAO,EACZ,EAAM,KAAK,IAIf,MAAO,CAAC,EAAM,GAAI,KAAI,IAGjB,WAAyB,EAAW,EAAmB,CAC5D,MAAO,IAAI,KAAI,CAAC,GAAG,GAAG,OAAO,AAAC,GAAM,EAAE,IAAI,KAOrC,WAAwB,EAAW,EAAmB,CAC3D,MAAO,IAAI,KAAI,CAAC,GAAG,GAAG,OAAO,AAAC,GAAM,CAAC,EAAE,IAAI,KChCtC,WACL,EACA,EACA,EACA,EACS,CAlBX,MAmBE,GAAM,GAAmB,GAAI,KAE7B,OAAW,KAAY,GAAO,CAC5B,GAAM,GAAU,EAAS,MAAM,KAEzB,EAAS,EAAQ,EAAQ,GACzB,EAAQ,EAAQ,EAAQ,GAGxB,EAAW,KAAQ,KAAR,OAAc,EAAK,GAEpC,EAAQ,IAAI,EAAU,CACpB,OACA,WACA,WACA,MAAO,CACL,SACA,WAKN,MAAO,GAGF,WACL,EACA,EACM,CACN,GAAM,CAAC,EAAQ,GAAY,EACrB,CAAC,EAAQ,GAAY,EAErB,EAAc,EAAa,EAAU,GACrC,EAAe,EAAY,EAAU,GACrC,EAAe,EAAY,EAAU,GAErC,EAAY,EAChB,EACA,EACA,EAAS,SACT,GAEI,EAAW,EACf,EACA,EACA,EAAS,QACT,GAEI,EAAU,EAAc,EAAQ,EAAQ,EAAS,OAAQ,GAE/D,MAAO,CACL,YACA,WACA,WAIG,WAAiB,EAAQ,EAAc,CAC5C,GAAM,GAAY,EAAY,EAAG,GAC3B,EAAW,EAAY,EAAG,GAEhC,MAAO,GAAe,EAAW",
  "names": []
}
